diff --git a/settings.c b/settings.c
index 9267d69..6e3a2fd 100644
--- a/settings.c
+++ b/settings.c
@@ -127,6 +127,14 @@ char		*cmd_font_name = NULL;	/* these are all set at startup */
 char		*oops_font_name = NULL;
 char		*statusbar_font_name = NULL;
 char		*tabbar_font_name = NULL;
+char		*default_font_family = NULL;
+int		default_font_size = XT_DS_DEFAULT_FONT_SIZE;
+char		*serif_font_family = NULL;
+char		*sans_serif_font_family = NULL;
+char		*monospace_font_family = NULL;
+char		*cursive_font_family = NULL;
+char		*fantasy_font_family = NULL;
+int		min_font_size = XT_DS_MIN_FONT_SIZE;
 
 char		*get_download_dir(struct settings *);
 char		*get_default_script(struct settings *);
@@ -221,6 +229,14 @@ int		set_allow_insecure_scripts(char *);
 int		set_http_proxy(char *);
 int		set_do_not_track(char *);
 int		set_gnutls_priority_string(struct settings *, char *);
+int		set_default_font(char *value);
+int		set_default_font_size(char *value);
+int		set_serif_font(char *value);
+int		set_sans_serif_font(char *value);
+int		set_monospace_font(char *value);
+int		set_cursive_font(char *value);
+int		set_fantasy_font(char *value);
+int		set_min_font_size(char *value);
 
 int		check_allow_insecure_content(char **);
 int		check_allow_insecure_scripts(char **);
@@ -235,6 +251,9 @@ int		check_color_visited_uris(char **);
 int		check_cookie_policy(char **);
 int		check_cookies_enabled(char **);
 int		check_ctrl_click_focus(char **);
+int		check_cursive_font(char **tt);
+int		check_default_font(char **tt);
+int		check_default_font_size(char **tt);
 int		check_default_script(char **);
 int		check_default_zoom_level(char **);
 int		check_download_dir(char **);
@@ -258,6 +277,7 @@ int		check_enable_strict_transport(char **);
 int		check_encoding(char **);
 int		check_external_editor(char **);
 int		check_fancy_bar(char **);
+int		check_fantasy_font(char **tt);
 int		check_gnutls_search_string(char **);
 int		check_guess_search(char **);
 int		check_gui_mode(char **);
@@ -270,14 +290,18 @@ int		check_icon_size(char **);
 int		check_js_auto_open_windows(char **);
 int		check_max_connections(char **);
 int		check_max_host_connections(char **);
+int		check_min_font_size(char **tt);
+int		check_monospace_font(char **tt);
 int		check_oops_font(char **);
 int		check_read_only_cookies(char **);
 int		check_referer(char **);
 int		check_refresh_interval(char **);
 int		check_resource_dir(char **);
+int		check_sans_serif_font(char **tt);
 int		check_save_global_history(char **);
 int		check_save_rejected_cookies(char **);
 int		check_search_string(char **);
+int		check_serif_font(char **tt);
 int		check_session_autosave(char **);
 int		check_session_timeout(char **);
 int		check_show_scrollbars(char **);
@@ -516,6 +540,9 @@ struct settings		rs[] = {
 	{ "cookie_policy",		XT_S_STR, 0, NULL, NULL,&s_cookie, NULL, set_cookie_policy_rt, check_cookie_policy, TT_COOKIE_POLICY },
 	{ "cookies_enabled",		XT_S_BOOL, 0,		&cookies_enabled, NULL, NULL, NULL, set_cookies_enabled, check_cookies_enabled, TT_COOKIES_ENABLED },
 	{ "ctrl_click_focus",		XT_S_BOOL, 0,		&ctrl_click_focus, NULL, NULL, NULL, set_ctrl_click_focus, check_ctrl_click_focus, TT_CTRL_CLICK_FOCUS },
+	{ "cursive_font_family",	XT_S_STR, 0, NULL,	&cursive_font_family, NULL, NULL, set_cursive_font, check_cursive_font, TT_CURSIVE_FONT_FAMILY},
+	{ "default_font_family",	XT_S_STR, 0, NULL,	&default_font_family, NULL, NULL, set_default_font, check_default_font, TT_DEFAULT_FONT_FAMILY},
+	{ "default_font_size",		XT_S_INT, 0,		&default_font_size, NULL, NULL, NULL, set_default_font_size, check_default_font_size, TT_DEFAULT_FONT_SIZE},
 	{ "default_script",		XT_S_STR, 1, NULL, NULL,&s_default_script, NULL, set_default_script_rt, check_default_script, TT_DEFAULT_SCRIPT },
 	{ "default_zoom_level",		XT_S_DOUBLE, 0,		NULL, NULL, NULL, &default_zoom_level, set_default_zoom_level, check_default_zoom_level, TT_DEFAULT_ZOOM_LEVEL },
 	{ "do_not_track",		XT_S_BOOL, 0,		&do_not_track, NULL, NULL, NULL, set_do_not_track, check_do_not_track, TT_DO_NOT_TRACK },
@@ -540,6 +567,7 @@ struct settings		rs[] = {
 	{ "encoding",			XT_S_STR, 0, NULL,	&encoding, NULL, NULL, NULL, check_encoding, TT_ENCODING },
 	{ "external_editor",		XT_S_STR,0, NULL,	&external_editor, NULL, NULL, set_external_editor, check_external_editor, TT_EXTERNAL_EDITOR },
 	{ "fancy_bar",			XT_S_BOOL,XT_SF_RESTART,&fancy_bar, NULL, NULL, NULL, set_fancy_bar, check_fancy_bar, TT_FANCY_BAR },
+	{ "fantasy_font_family",	XT_S_STR, 0, NULL,	&fantasy_font_family, NULL, NULL, set_cursive_font, check_cursive_font, TT_FANTASY_FONT_FAMILY},
 	{ "gnutls_priority_string",	XT_S_STR, 0, NULL, NULL,&s_gnutls_priority_string, NULL, NULL, check_gnutls_search_string, TT_GNUTLS_PRIORITY_STRING },
 	{ "guess_search",		XT_S_BOOL, 0,		&guess_search, NULL, NULL, NULL, set_guess_search, check_guess_search, TT_GUESS_SEARCH },
 	{ "gui_mode",			XT_S_STR, 0, NULL, NULL,&s_gui_mode, NULL, NULL, check_gui_mode, TT_GUI_MODE },
@@ -552,15 +580,19 @@ struct settings		rs[] = {
 	{ "js_auto_open_windows",	XT_S_BOOL, 1,		&js_auto_open_windows, NULL, NULL, NULL, set_js_auto_open_windows, check_js_auto_open_windows, TT_JS_AUTO_OPEN_WINDOWS },
 	{ "max_connections",		XT_S_INT, XT_SF_RESTART,&max_connections, NULL, NULL, NULL, NULL, check_max_connections, TT_MAX_CONNECTIONS },
 	{ "max_host_connections",	XT_S_INT, XT_SF_RESTART,&max_host_connections, NULL, NULL, NULL, NULL, check_max_host_connections, TT_MAX_HOST_CONNECTIONS },
+	{ "minimum_font_size",		XT_S_INT, 0,		&min_font_size, NULL, NULL, NULL, set_min_font_size, check_min_font_size, TT_MINIMUM_FONT_SIZE},
+	{ "monospace_font_family",	XT_S_STR, 0, NULL,	&monospace_font_family, NULL, NULL, set_cursive_font, check_cursive_font, TT_MONOSPACE_FONT_FAMILY},
 	{ "oops_font",			XT_S_STR, 0, NULL, &oops_font_name, NULL, NULL, set_oops_font, check_oops_font, TT_OOPS_FONT },
 	{ "preload_strict_transport",	XT_S_BOOL, 0,		&preload_strict_transport, NULL, NULL, NULL, NULL, NULL, TT_PRELOAD_STRICT_TRANSPORT },
 	{ "read_only_cookies",		XT_S_BOOL, 0,		&read_only_cookies, NULL, NULL, NULL, NULL, check_read_only_cookies, TT_READ_ONLY_COOKIES },
 	{ "referer",			XT_S_STR, 0, NULL, NULL,&s_referer, NULL, set_referer_rt, check_referer, TT_REFERER },
 	{ "refresh_interval",		XT_S_INT, 0,		&refresh_interval, NULL, NULL, NULL, set_refresh_interval, check_refresh_interval, TT_REFRESH_INTERVAL },
 	{ "resource_dir",		XT_S_STR, 0, NULL,	&resource_dir, NULL, NULL, NULL, check_resource_dir, TT_RESOURCE_DIR },
+	{ "sans_serif_font_family",	XT_S_STR, 0, NULL,	&sans_serif_font_family, NULL, NULL, set_sans_serif_font, check_sans_serif_font, TT_SANS_SERIF_FONT_FAMILY},
 	{ "save_global_history",	XT_S_BOOL,XT_SF_RESTART,&save_global_history, NULL, NULL, NULL, NULL, check_save_global_history, TT_SAVE_GLOBAL_HISTORY },
 	{ "save_rejected_cookies",	XT_S_BOOL,XT_SF_RESTART,&save_rejected_cookies, NULL, NULL, NULL, NULL, check_save_rejected_cookies, TT_SAVE_REJECTED_COOKIES },
 	{ "search_string",		XT_S_STR, 0, NULL,	&search_string, NULL, NULL, set_search_string, check_search_string, TT_SEARCH_STRING },
+	{ "serif_font_family",		XT_S_STR, 0, NULL,	&serif_font_family, NULL, NULL, set_serif_font, check_serif_font, TT_SERIF_FONT_FAMILY},
 	{ "session_autosave",		XT_S_BOOL, 0,		&session_autosave, NULL, NULL, NULL, set_session_autosave, check_session_autosave, TT_SESSION_AUTOSAVE },
 	{ "session_timeout",		XT_S_INT, 0,		&session_timeout, NULL, NULL, NULL, set_session_timeout, check_session_timeout, TT_SESSION_TIMEOUT },
 	{ "show_scrollbars",		XT_S_BOOL, 0,		&show_scrollbars, NULL, NULL, NULL, set_show_scrollbars, check_show_scrollbars, TT_SHOW_SCROLLBARS },
@@ -1323,6 +1355,219 @@ check_download_dir(char **tt)
 }
 
 int
+set_default_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		default_font_family = XT_DS_DEFAULT_FONT;
+	else {
+		if (default_font_family) {
+			g_free(default_font_family);
+		}
+		default_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "default-font-family",
+		    default_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_default_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_DEFAULT_FONT);
+	return (g_strcmp0(default_font_family, XT_DS_DEFAULT_FONT));
+}
+
+int
+set_serif_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		serif_font_family = XT_DS_SERIF_FONT;
+	else {
+		if (serif_font_family) {
+			g_free(serif_font_family);
+		}
+		serif_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "serif-font-family",
+		    serif_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_serif_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_SERIF_FONT);
+	return (g_strcmp0(serif_font_family, XT_DS_SERIF_FONT));
+}
+
+int
+set_sans_serif_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		sans_serif_font_family = XT_DS_SANS_SERIF_FONT;
+	else {
+		if (sans_serif_font_family) {
+			g_free(sans_serif_font_family);
+		}
+		sans_serif_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "sans-serif-font-family",
+		    sans_serif_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_sans_serif_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_SANS_SERIF_FONT);
+	return (g_strcmp0(sans_serif_font_family, XT_DS_SANS_SERIF_FONT));
+}
+
+int
+set_cursive_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		cursive_font_family = XT_DS_CURSIVE_FONT;
+	else {
+		if (cursive_font_family) {
+			g_free(cursive_font_family);
+		}
+		cursive_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "cursive-font-family",
+		    cursive_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_cursive_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_CURSIVE_FONT);
+	return (g_strcmp0(cursive_font_family, XT_DS_CURSIVE_FONT));
+}
+
+int
+set_fantasy_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		fantasy_font_family = XT_DS_FANTASY_FONT;
+	else {
+		if (fantasy_font_family) {
+			g_free(fantasy_font_family);
+		}
+		fantasy_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "fantasy-font-family",
+		    fantasy_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_fantasy_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_FANTASY_FONT);
+	return (g_strcmp0(fantasy_font_family, XT_DS_FANTASY_FONT));
+}
+
+int
+set_monospace_font(char *value)
+{
+	struct tab		*t;
+
+	if (value == NULL || strlen(value) == 0)
+		monospace_font_family = XT_DS_MONOSPACE_FONT;
+	else {
+		if (monospace_font_family) {
+			g_free(monospace_font_family);
+		}
+		monospace_font_family = g_strdup(value);
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "monospace-font-family",
+		    monospace_font_family, (char *)NULL);
+	return (0);
+}
+
+int
+check_monospace_font(char **tt)
+{
+	*tt = g_strdup_printf("Default: %s", XT_DS_MONOSPACE_FONT);
+	return (g_strcmp0(monospace_font_family, XT_DS_MONOSPACE_FONT));
+}
+
+int
+set_default_font_size(char *value)
+{
+	struct tab		*t;
+	int			tmp;
+	const char		*errstr;
+	
+
+	if (value == NULL || strlen(value) == 0)
+		default_font_size = XT_DS_DEFAULT_FONT_SIZE;
+	else {
+		tmp = strtonum(value, 5, INT_MAX, &errstr);
+		if (errstr)
+			return (-1);
+		default_font_size = tmp;
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "default-font-size",
+		    default_font_size, (char *)NULL);
+	return (0);
+}
+
+int
+check_default_font_size(char **tt)
+{
+	*tt = g_strdup_printf("Default: %d", XT_DS_DEFAULT_FONT_SIZE);
+	return (default_font_size != XT_DS_DEFAULT_FONT_SIZE);
+}
+
+int
+set_min_font_size(char *value)
+{
+	struct tab		*t;
+	int			tmp;
+	const char		*errstr;
+
+	if (value == NULL || strlen(value) == 0)
+		min_font_size = XT_DS_MIN_FONT_SIZE;
+	else {
+		tmp = strtonum(value, 0, INT_MAX, &errstr);
+		if (errstr)
+			return (-1);
+		min_font_size = tmp;
+	}
+	TAILQ_FOREACH(t, &tabs, entry)
+		g_object_set(G_OBJECT(t->settings), "minimum-font-size",
+		    min_font_size, (char *)NULL);
+	return (0);
+}
+
+int
+check_min_font_size(char **tt)
+{
+	*tt = g_strdup_printf("Default: %d", XT_DS_MIN_FONT_SIZE);
+	return (min_font_size != XT_DS_MIN_FONT_SIZE);
+}
+
+int
 add_alias(struct settings *s, char *line)
 {
 	char			*l, *alias;
diff --git a/xombrero.1 b/xombrero.1
index b9b25da..955c7a0 100644
--- a/xombrero.1
+++ b/xombrero.1
@@ -1164,6 +1164,8 @@ would not match not-moo.com.
 Enable cookies.
 .It Cm ctrl_click_focus
 Give focus in newly created tab instead of opening it in the background.
+.It Cm cursive_font_family
+Set cursive font family used for rendering web pages.
 .It Cm custom_uri
 This setting provides the ability to run custom executables for
 special URIs.
@@ -1182,6 +1184,10 @@ where
 is a program that will parse the
 .Pa mailto
 URI and open your mail client.
+.It Cm default_font_family
+Set default font family used for rendering web pages.
+.It Cm default_font_size
+Set default font size used for rendering web pages.
 .It Cm default_script
 Path to the script used as the default value for the run_script
 command.
@@ -1315,6 +1321,8 @@ Enables a backward, forward, and stop button to the toolbar.
 Additionally if
 .Cm search_string
 is set it'll enable an entry box for searches.
+.It Cm fantasy_font_family
+Set fantasy font family used for rendering web pages.
 .It Cm force_https
 This setting is used to define the domains of sites that should be
 only accessed over the HTTPS scheme.
@@ -1477,6 +1485,10 @@ before the MIME handler is called.
 The special binary name "donothing" may be used to ignore a MIME type
 without displaying any warnings from being unable to execute the
 binary.
+.It Cm minimum_font_size
+Set minimum font size used for rendering web pages.
+.It Cm monospace_font_family
+Set monospace font family used for rendering web pages.
 .It Cm oops_font
 Set the font used to display error messages.
 E.g.
@@ -1525,6 +1537,8 @@ Directory that contains various
 .Nm
 resources such as icons.
 This is OS-specific and should be handled by the porter.
+.It Cm sans_serif_font_family
+Set Sans Serif font family used for rendering web pages.
 .It Cm save_global_history
 If set the global history will be saved to
 .Pa ~/.xombrero/history
@@ -1543,6 +1557,8 @@ Default search engine string.
 See the
 .Pa xombrero.conf
 file for details.
+.It Cm serif_font_family
+Set Serif font family used for rendering web pages.
 .It Cm session_autosave
 Enable session auto-saving when changing state (e.g. adding or removing a tab).
 The session name is what is currently in use and is described in the
diff --git a/xombrero.c b/xombrero.c
index 35d3911..e478e84 100644
--- a/xombrero.c
+++ b/xombrero.c
@@ -6948,6 +6948,23 @@ setup_webkit(struct tab *t)
 		    "enable-running-of-insecure-content",
 		    allow_insecure_scripts, (char *)NULL);
 
+	g_object_set(G_OBJECT(t->settings),
+	    "default-font-family", default_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "serif-font-family", serif_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "sans-serif-font-family", sans_serif_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "monospace-font-family", monospace_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "cursive-font-family", cursive_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "fantasy-font-family", fantasy_font_family, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "default-font-size", default_font_size, (char *)NULL);
+	g_object_set(G_OBJECT(t->settings),
+	    "minimum-font-size", min_font_size, (char *)NULL);
+
 	webkit_web_view_set_settings(t->wv, t->settings);
 }
 
@@ -8623,6 +8640,12 @@ main(int argc, char **argv)
 	userstyle = g_filename_to_uri(path, NULL, NULL);
 	g_free(path);
 	stylesheet = g_strdup(userstyle);
+	default_font_family = g_strdup(XT_DS_DEFAULT_FONT);
+	serif_font_family = g_strdup(XT_DS_SERIF_FONT);
+	sans_serif_font_family = g_strdup(XT_DS_SANS_SERIF_FONT);
+	monospace_font_family = g_strdup(XT_DS_MONOSPACE_FONT);
+	cursive_font_family = g_strdup(XT_DS_CURSIVE_FONT);
+	cursive_font_family = g_strdup(XT_DS_FANTASY_FONT);
 
 	/* set statically allocated (struct special) settings */
 	if (strlen(default_script) == 0)
diff --git a/xombrero.h b/xombrero.h
index 303ef1c..1760295 100644
--- a/xombrero.h
+++ b/xombrero.h
@@ -695,6 +695,15 @@ int		command_mode(struct tab *, struct karg *);
 #define XT_DS_GNUTLS_PRIORITY_STRING	(NULL)
 #define XT_DS_JS_AUTO_OPEN_WINDOWS	(1)
 
+#define XT_DS_DEFAULT_FONT	("sans-serif")
+#define XT_DS_SERIF_FONT	("serif")
+#define XT_DS_SANS_SERIF_FONT	("sans-serif")
+#define XT_DS_CURSIVE_FONT	("serif")
+#define XT_DS_FANTASY_FONT	("serif")
+#define XT_DS_MONOSPACE_FONT	("monospace")
+#define XT_DS_DEFAULT_FONT_SIZE	(12)
+#define XT_DS_MIN_FONT_SIZE	(5)
+
 /* actions */
 #define XT_STYLE_CURRENT_TAB	(0)
 #define XT_STYLE_GLOBAL		(1)
@@ -968,6 +977,15 @@ extern char	*gnutls_priority_string;
 extern int	anonymize_headers;
 extern int	js_auto_open_windows;
 
+extern char	*default_font_family;
+extern int	default_font_size;
+extern char	*serif_font_family;
+extern char	*sans_serif_font_family;
+extern char	*monospace_font_family;
+extern char	*cursive_font_family;
+extern char	*fantasy_font_family;
+extern int	min_font_size;
+
 /* globals */
 extern void		(*os_init)(void);
 extern char		*version;
